cmake_minimum_required(VERSION 3.8)
project(arm_test_node)

# Compiler flags for warnings
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(Threads REQUIRED)
find_package(SDL2 REQUIRED)

# Set Phoenix library directory based on architecture
if (${CMAKE_LIBRARY_ARCHITECTURE} STREQUAL "arm-linux-gnueabihf") # Jetson TK1 / Pi
    set(PHOENIX_LIBS_DIR /home/wiscrobo/workspace/Phoenix5-Linux-Example/lib/arm32)
elseif (${CMAKE_LIBRARY_ARCHITECTURE} STREQUAL "aarch64-linux-gnu") # Jetson TX2
    set(PHOENIX_LIBS_DIR /home/wiscrobo/workspace/Phoenix5-Linux-Example/lib/arm64)
else()
    set(PHOENIX_LIBS_DIR /home/wiscrobo/workspace/Phoenix5-Linux-Example/lib/x86-64)
endif()

# Include directories
include_directories(/home/wiscrobo/workspace/Phoenix5-Linux-Example/include)
include_directories(include)  # Ensure local include files are accessible

# Create executable
add_executable(arm_test_node src/arm_test_node.cpp)

# Link dependencies
ament_target_dependencies(arm_test_node rclcpp std_msgs)

target_include_directories(arm_test_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

target_compile_features(arm_test_node PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

target_link_libraries(arm_test_node
  ${PHOENIX_LIBS_DIR}/libCTRE_Phoenix.so
  ${PHOENIX_LIBS_DIR}/libCTRE_PhoenixCCI.so
  ${PHOENIX_LIBS_DIR}/libCTRE_PhoenixTools.so
  Threads::Threads
  ${SDL2_LIBRARIES}
)

# Ensure Phoenix libraries are copied to the executable location after build
add_custom_command(TARGET arm_test_node POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${PHOENIX_LIBS_DIR}
        $<TARGET_FILE_DIR:arm_test_node>)

# Install the node
install(TARGETS arm_test_node
  DESTINATION lib/${PROJECT_NAME})

# Linter checks for code quality
if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  set(ament_cmake_copyright_FOUND TRUE)  # Skip copyright check
  set(ament_cmake_cpplint_FOUND TRUE)    # Skip cpplint check (for now)
  ament_lint_auto_find_test_dependencies()
endif()

# Export package dependencies
ament_export_dependencies(rclcpp std_msgs SDL2)
ament_package()
